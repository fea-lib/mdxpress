#!/bin/bash

set -e

# Helper: clean and create a directory
function reset_dir() {
  local dir="$1"
  if [ -d "$dir" ]; then
    rm -rf "$dir"
  fi
  mkdir -p "$dir"
}

# Helper: run setup.sh with simulated input
function run_setup() {
  local workdir="$1"
  local docs_dir="$2"
  local target_dir="$3"
  (
    cd "$workdir"
    # Simulate interactive input for setup.sh
    printf "%s\n%s\nY\n" "$docs_dir" "$target_dir" | bash ../../cli/setup.sh
  )
}

# Helper: validate file content
function validate_env_file() {
  local file="$1"
  local expected="$2"
  if ! [ -f "$file" ]; then
    echo "‚ùå $file does not exist"
    exit 1
  fi
  # Normalize actual file content: join lines with literal \n
  local actual
  actual=$(awk '{printf "%s\\n", $0} END {if (NR>0) printf ""}' "$file" | sed 's/\\n$//')
  if [ "$actual" != "$expected" ]; then
    echo "‚ùå $file does not match expected content"
    diff <(echo "$expected") <(echo "$actual")
    exit 1
  fi
  echo "‚úÖ $file matches expected content"
}

# --- Initialization ---
reset_dir ".test"

# --- Case 1: Multiple Apps ---
reset_dir ".test/multiple-apps"
cp -r docs ".test/multiple-apps/"
run_setup ".test/multiple-apps" "docs" "apps/docs"
validate_env_file ".test/multiple-apps/apps/docs/src/environment.ts" "// This file is auto-generated by setup.sh\nexport const PATH_APP_TO_REPO_ROOT = \"../..\";\nexport const DOCS_DIR = \"docs\";"

# --- Case 2: Nested App ---
reset_dir ".test/nested-app"
cp -r docs ".test/nested-app/"
run_setup ".test/nested-app" "docs" "docs/app"
validate_env_file ".test/nested-app/docs/app/src/environment.ts" "// This file is auto-generated by setup.sh\nexport const PATH_APP_TO_REPO_ROOT = \"../..\";\nexport const DOCS_DIR = \"docs\";"

echo "üéâ All tests passed!"
